// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  password              String?
  profileImage          String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  type                  AccountType            @default(ADULT)
  createdSources        WordSource[]           @relation("createdSource")
  otherAvailableSources UserAvailableSources[]
  sessionHistory        Session[]
  Child                 Child?
  Parent                Parent?
}

model Child {
  parent Parent? @relation(fields: [parentId], references: [userId], onDelete: SetNull)

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  parentId String?

  @@id([userId])
  @@index([parentId])
}

model Parent {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  children Child[]

  @@id([userId])
}

model UserAvailableSources {
  wordSource   WordSource @relation(fields: [wordSourceId], references: [id], onDelete: Cascade)
  wordSourceId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@id([wordSourceId, userId])
  @@index([wordSourceId])
  @@index([userId])
}

model WordSource {
  id                   String                 @id @default(uuid())
  name                 String
  creator              User                   @relation("createdSource", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  userAvailableSources UserAvailableSources[]
  documentType         String
  createdAt            DateTime               @default(now())
  firstLanguage        Language               @relation("firstLanguage", fields: [firstLanguageCode], references: [code])
  secondLanguage       Language               @relation("secondLanguage", fields: [secondLanguageCode], references: [code])
  wordPairs            WordPair[]
  firstLanguageCode    String
  secondLanguageCode   String

  @@index([creatorId])
  @@index([firstLanguageCode])
  @@index([secondLanguageCode])
}

model WordPair {
  id           Int        @id @default(autoincrement())
  firstValue   String
  secondValue  String
  wordSource   WordSource @relation(fields: [wordSourceId], references: [id], onDelete: Cascade)
  wordSourceId String

  @@index([wordSourceId])
}

model Language {
  languageName              String
  code                      String       @unique
  firstLanguageWordSources  WordSource[] @relation("firstLanguage")
  secondLanguageWordSources WordSource[] @relation("secondLanguage")

  @@index([code])
}

model Session {
  id                String             @id @default(uuid())
  user              User?              @relation(fields: [userId], references: [id])
  userId            String?
  startedAt         DateTime
  endedAt           DateTime           @default(now())
  type              SessionType
  SessionStatistics SessionStatistics?

  @@index([userId])
}

model SessionStatistics {
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  correct   Int
  incorrect Int
  maxStreak Int
  accuracy  Int

  @@id([sessionId])
  @@index([sessionId])
}

enum SessionType {
  TEST
  PRACTICE
}

enum AccountType {
  ADULT
  CHILD
  TEST
}
